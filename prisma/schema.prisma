generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  REVIEW
  DONE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  invitedById   String?
  password      String?
  resetToken    String?   @unique
  resetTokenExpiry DateTime?

  accounts      Account[]
  sessions      Session[]
  assignedTasks Task[]    @relation("AssignedTasks")
  createdTasks  Task[]    @relation("CreatedTasks")
  comments      Comment[]
  mentions      Mention[]
  invitedBy     User?     @relation("UserInvitations", fields: [invitedById], references: [id])
  invitedUsers  User[]    @relation("UserInvitations")
  otps          OTP[]

  @@index([resetToken])
  @@index([resetTokenExpiry])
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      TaskStatus  @default(OPEN)
  priority    Priority    @default(MEDIUM)
  deadline    DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  assignedTo  User        @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String
  createdBy   User        @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById String
  comments    Comment[]
  attachments Attachment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  taskId    String

  author      User               @relation(fields: [authorId], references: [id])
  task        Task               @relation(fields: [taskId], references: [id])
  mentions    Mention[]
  attachments CommentAttachment[]
}

model Mention {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Attachment {
  id        String   @id @default(cuid())
  fileName  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  taskId    String
  createdAt DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id])
}

model CommentAttachment {
  id        String   @id @default(cuid())
  fileName  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  commentId String
  createdAt DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OTPType {
  PROFILE_UPDATE
  PASSWORD_RESET
  EMAIL_VERIFICATION
}

model OTP {
  id        String   @id @default(cuid())
  userId    String
  otp       String
  type      OTPType
  isUsed    Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([otp])
  @@index([expiresAt])
}
